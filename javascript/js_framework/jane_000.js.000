function trace() {
    var r = '';
    var a = arguments;
    var L = a.length;
    var i = 0;
    for( i = 0 ; i < L ; i++ ) {
        r += a[i];
        if( i+1 < L ) {r += ' , ';}
    }    
    //alert( r );
    console.debug(r);
    //document.body.innerHTML += r + '<br>';
}

/*
 * implement:
 *      - 
 *      - 
 *      - 
 */
var JaneInitArguments = {
    
}

var Jane = new (function( arg ){
    this.onLOAD = function() {
        trace( 'Jane initialized' );
        
        /*
        Stage._.L = [];        
        var s = new Sprite();
        */
        
        Stage._.init();
        
        return;
        
        div = document.createElement('div');
            div.style.position = 'absolute';
            div.style.left = '10px';
            div.style.top = '10px';
            div.style.width = '25px';
            div.style.height = '25px';
            div.style.backgroundColor = '#FF0000';
        document.body.appendChild( div );
        
        //init();
        setTimeout( init , 2500 );
    }
    
    var div = null;
    
    // Init function
    var t = 0; // time
    var fps = 50; // Frame Per Sec
    var b = 1000 / fps; // base interval
    var r = 0; // real interval
    var id = null;
    
    var init = function() {
        t = new Date().getTime();
        //trace( 1000 / fps );
        //id = setTimeout( tick_1 , b );
        
        duration = 1;
        sx = 10;
        dx = 250;
            p = dx - sx;
    
        start = new Date().getTime();
        //var end = start + 1000;
        end = start + ( duration * 1000 );
        dur = end - start;

        running = true;
        
        //trace( 'start' );
        id = setInterval( tick_2 , b );
    }
    var tick_1 = function() {
        //trace('you suck!');
        r = new Date().getTime() - t;
        t = new Date().getTime();
        var n = b - r;
        n = ( n > 0 ) ? b + ( b - r ) : b - ( r - b ) ;
        if( n < 0 ) {n = 0;}
        
        //trace( 'base interval:' , b );
        //trace( 'real interval:' , r );
        //trace( 'next interval:' , n );
        //id = setTimeout( tick , 1000 );
        
        trace( 'base interval:' , b , 'real interval:' , r , 'late:' , r - b , 'next interval:' , n );
        
        id = setTimeout( tick_1 , n );
    }
        var duration = 1;
        var sx = 10;
        var dx = 100;
            var p = dx - sx;
    
        var start = new Date().getTime();
        //var end = start + 1000;
        var end = start + ( duration * 1000 );
        var dur = end - start;

        var running = true;

    var tick_2 = function() {
        t = new Date().getTime();
        i = ( t - start ) / dur;
        if( i > 1 ) {
            i = 1;              
            running = false;
            //clearInterval( id );
        }
        
        div.style.left = String( sx + ( p * i ) ) + 'px';
        //trace( 'interpolation:' , i , 'duration*percent:' , duration * i , 'duration:' , duration );
        
        if( running == false ) {
            //trace( 'end' );
            clearInterval( id );
        }
        
        //trace('2');
        /*
        r = new Date().getTime() - t;
        t = new Date().getTime();
        A += b;
        B += r
        trace( 'base interval:' , b , 'real interval:' , r );
        trace( 'base time:' , A , 'real time:' , B , 'interpolation:' , B / A );
        trace( 'base frame:' , A / b , 'real frame:' , B / b  );
        */
        //trace( '...' );
        
        //trace( t , new Date().getTime() );
        //trace( start , end );
    }
    
})();
    var Stage = new (function(){
        this._ = {
            fps : 0 , // Stage FPS
            
            // RENDER Related
            div : null , // fundamental DIV container            
            needUpdate : false , //
            changeArray : null , // an Array to handle rendering changes
            
            // CHILD Related
            childArray : null , // Children list
            lastObjID : 0 , // Individual Object ID
            genObjID : function() {
                Stage._.lastObjID++;
                return Stage._.lastObjID;
            } ,
            genName : function() {                
                return 'instance' + String( Math.floor(Math.random()*(10000)) ); // 0 - 9999 , original formula: [ Math.floor(Math.random() * (1+max-min)) + min; ]
            } ,
            
            init : function(){
                Stage._.initTime = new Date().getTime();

                // CHILD Related
                Stage._.childArray = [];
                Stage._.lastObjID = 0;
                
                // TWEEN Related                
                Stage._.tweenArray = [];
                
                // TIMER Related
                Stage._.fps = 25
                Stage._.intervalID = window.setInterval( Stage._.timer , Number( 1000 / Stage._.fps ).toFixed( 0 ) );
            } ,
            
            //TWEEN Related
            tweenArray : null , // Tween list
            initTime : 0 , // new Date().getTime() at initialization
            currentTime : 0 , 
            intervalID : 0 , // interval ID for setInterval() timer function
                        
            timer : function() {
                Stage._.currentTime = new Date().getTime();
                //trace( Stage._.intervalID );
                if( Stage._.needUpdate == true ) {
                    
                    
                    
                    Stage._.needUpdate = false;
                }
            }
        }
                
        this.frameRate = function( value ){
            if( value != undefined || value != null ) {
                var q = Number( value ).toFixed( 1 );
                if( Stage._.fps != q ) {
                    Stage._.fps == q;
                    window.clearInterval( Stage._.Stage._.intervalID );
                    Stage._.intervalID = window.setInterval( Stage._.timer , Number( 1000 / Stage._.fps ).toFixed( 0 ) );
                }
            }
            return Stage._.fps;
        }
        this.mouseX = function(){}
        this.mouseY = function(){}
        
        this.width = function(){}
        this.height = function(){}
        
        this.numChildren = function(){
            return Stage._.childArray.length;
        };
        this.addChild = function( child ){
            if( child != undefined || child != null || child._ != null || child._.objID != null ) {
                var a = Stage._.childArray;
                var i = a.length;
                while(i--) {
                    if( a[i]._.objID == child._.objID ) {
                        a.splice( i , 1 );
                    }
                }
                a.push( child );
                Stage._.needUpdate = true;
                return child;
            }
            return null;
        };
        this.hasChild = function(){};
        this.getChild = function(){};
        this.removeChild = function(){
            if( child != undefined || child != null || child._ != null || child._.objID != null ) {
                var a = Stage._.childArray;
                var i = a.length;
                while(i--) {
                    if( a[i]._.objID == child._.objID ) {
                        a.splice( i , 1 );
                        Stage._.needUpdate = true;
                        return child;
                    }
                }                
            }
            return null;
        };
    });
    
    function Group( x , y , width , height ){
        this._ = {
            D : null , // Div
            L : null // Children list
        }
        
        // Init block
        this._.L = [];
    };
    
    function Sprite( x , y , width , height ){
        this._ = {
            
        }
        this.x = function(){};
        
        // Init block
        trace( x , y , width , height );
    };
    
    function Tween(){};
    Tween.to = function( object , duration , props , ease ){
        
    };
    
    function TimeLine(){};
    
    function CSS() {
        
    };
    //CSS.addClass = function(){};